{"remainingRequest":"D:\\Microsoft VS Code\\vs code\\软件项目管理\\大实例\\前后端源码\\front\\node_modules\\babel-loader\\lib\\index.js!D:\\Microsoft VS Code\\vs code\\软件项目管理\\大实例\\前后端源码\\front\\src\\api\\tree.js","dependencies":[{"path":"D:\\Microsoft VS Code\\vs code\\软件项目管理\\大实例\\前后端源码\\front\\src\\api\\tree.js","mtime":1741681637585},{"path":"D:\\Microsoft VS Code\\vs code\\软件项目管理\\大实例\\前后端源码\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Microsoft VS Code\\vs code\\软件项目管理\\大实例\\前后端源码\\front\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/Microsoft VS Code/vs code/软件项目管理/大实例/前后端源码/front/src/api/tree.js"],"names":["request","getEncryptKeyWord","constant","getAllNodes","delOneNode","delManyNode","changeTwoNodes","editOneNode","getAllBrotherIndex","getAllParentIndex","commonSearch","keyWords","parentId","virtualRootFlag","searchKey","lazy","preName","sort","url","method","data","nodeId","nodeChangeId","node","JSON","stringify","nodes","console","log","map","e","id","join","SPLIT_OPERATOR","COMMA","treeInfo","listKeyWords","regKey","pageInfo","sortJson"],"mappings":"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","sourcesContent":["import request from '@/utils/request'\r\nimport { getEncryptKeyWord } from '@/utils/rsaEncrypt'\r\nimport constant from '@/constant'\r\n\r\nexport default {\r\n  getAllNodes,\r\n  delOneNode,\r\n  delManyNode,\r\n  changeTwoNodes,\r\n  editOneNode,\r\n  getAllBrotherIndex,\r\n  getAllParentIndex,\r\n  commonSearch\r\n}\r\n// 获得所有树节点\r\nasync function getAllNodes({ keyWords, parentId = -1, virtualRootFlag = true, searchKey = '', lazy = false, preName = '', sort }) {\r\n  keyWords = await getEncryptKeyWord(keyWords)\r\n  return request({\r\n    url: '/dataTree/readAllTreeNodes',\r\n    method: 'post',\r\n    data: {\r\n      keyWords,\r\n      parentId,\r\n      virtualRootFlag,\r\n      searchKey,\r\n      lazy,\r\n      preName,\r\n      sort\r\n    }\r\n  })\r\n}\r\n// 交换两个树节点位置\r\nasync function changeTwoNodes(keyWords, nodeId, nodeChangeId) {\r\n  keyWords = await getEncryptKeyWord(keyWords)\r\n  return request({\r\n    url: '/dataTree/changeTwoNodes',\r\n    method: 'post',\r\n    data: {\r\n      keyWords: keyWords,\r\n      nodeId: nodeId,\r\n      nodeChangeId: nodeChangeId\r\n    }\r\n  })\r\n}\r\n// 删除一个节点\r\nasync function delOneNode(keyWords, node) {\r\n  keyWords = await getEncryptKeyWord(keyWords)\r\n  return request({\r\n    url: '/dataTree/delOneNode',\r\n    method: 'post',\r\n    data: {\r\n      keyWords: keyWords,\r\n      node: JSON.stringify(node)\r\n    }\r\n  })\r\n}\r\n// 删除多个节点\r\nasync function delManyNode(keyWords, nodes) {\r\n  keyWords = await getEncryptKeyWord(keyWords)\r\n  console.log(nodes.map(e => e.id).join(constant.SPLIT_OPERATOR.COMMA))\r\n  return request({\r\n    url: '/dataTree/delManyNode',\r\n    method: 'post',\r\n    data: {\r\n      keyWords: keyWords,\r\n      nodes: JSON.stringify(nodes)\r\n      // nodes: getEncryptKeyWord(nodes.map(e => e.id).join(constant.SPLIT_OPERATOR.COMMA))\r\n    }\r\n  })\r\n}\r\n\r\n// 编辑一个节点（包括新增）\r\n// 传theOrder且为-1.代表无theOrder字段，其他情况需要对theOrder字段进行赋值处理\r\nasync function editOneNode(keyWords, node) {\r\n  keyWords = await getEncryptKeyWord(keyWords)\r\n  return request({\r\n    url: '/dataTree/editOneNode',\r\n    method: 'post',\r\n    data: {\r\n      keyWords: keyWords,\r\n      node: JSON.stringify(node)\r\n    }\r\n  })\r\n}\r\n// 获得所有父节点\r\nasync function getAllParentIndex(keyWords, nodeId) {\r\n  keyWords = await getEncryptKeyWord(keyWords)\r\n  return request({\r\n    url: '/dataTree/getAllParentIndex',\r\n    method: 'post',\r\n    data: {\r\n      keyWords: keyWords,\r\n      nodeId: nodeId\r\n    }\r\n  })\r\n}\r\n// 获得当前节点的直接父亲节点\r\nasync function getAllBrotherIndex(keyWords, nodeId) {\r\n  keyWords = await getEncryptKeyWord(keyWords)\r\n  return request({\r\n    url: '/dataTree/getAllBrotherIndex',\r\n    method: 'post',\r\n    data: {\r\n      keyWords: keyWords,\r\n      nodeId: nodeId\r\n    }\r\n  })\r\n}\r\n\r\n// 树结构条件的列表查询\r\nfunction commonSearch({ treeInfo, listKeyWords, searchKey, regKey, pageInfo, sortJson }) {\r\n  return request({\r\n    url: '/dataTree/commonSearch',\r\n    method: 'post',\r\n    data: {\r\n      treeInfo,\r\n      listKeyWords,\r\n      searchKey,\r\n      regKey,\r\n      pageInfo,\r\n      sortJson\r\n    }\r\n  })\r\n}\r\n"]}]}