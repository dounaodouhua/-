{"remainingRequest":"D:\\Microsoft VS Code\\vs code\\软件项目管理\\大实例\\前后端源码\\front\\node_modules\\babel-loader\\lib\\index.js!D:\\Microsoft VS Code\\vs code\\软件项目管理\\大实例\\前后端源码\\front\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Microsoft VS Code\\vs code\\软件项目管理\\大实例\\前后端源码\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Microsoft VS Code\\vs code\\软件项目管理\\大实例\\前后端源码\\front\\src\\components\\SimpleTreeSelect.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Microsoft VS Code\\vs code\\软件项目管理\\大实例\\前后端源码\\front\\src\\components\\SimpleTreeSelect.vue","mtime":1741681638506},{"path":"D:\\Microsoft VS Code\\vs code\\软件项目管理\\大实例\\前后端源码\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Microsoft VS Code\\vs code\\软件项目管理\\大实例\\前后端源码\\front\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\Microsoft VS Code\\vs code\\软件项目管理\\大实例\\前后端源码\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Microsoft VS Code\\vs code\\软件项目管理\\大实例\\前后端源码\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["SimpleTreeSelect.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <el-cascader v-if=\"isShowInfo\" ref=\"cascader\" v-model=\"arrVal\" v-loading=\"loading\" class=\"cascader\" :multiple=\"multiple\" :append-to-body=\"false\" :size=\"size\" :options=\"options\" :props=\"props\" :placeholder=\"placeholder\" clearable=\"\" @change=\"handleChange\" />\r\n</template>\r\n<script>\r\n// cascader没有loading属性\r\nimport treeAPI from '@/api/tree'\r\nimport _ from 'lodash'\r\n\r\nexport default {\r\n  name: 'SimpleTreeSelect',\r\n  props: {\r\n    value: { type: Number, default: () => null }, // 父级 v-model 绑定值（后端返回的 id 值）\r\n    field: { type: String, default: '' },\r\n    keyWords: { type: String, default: '' }, // 搜索级联选项关键字\r\n    placeholder: { type: String, default: '请选择' },\r\n    checkStrictly: { type: Boolean, default: true }, // 是否严格的遵守父子节点不互相关联\r\n    size: { type: String, default: '' },\r\n    searchKeys: { type: Object, default: () => {} },\r\n    lazy: { type: Boolean, default: true },\r\n    multiple: { type: Boolean, default: false }\r\n  },\r\n  data() {\r\n    return {\r\n      isShowInfo: true,\r\n      arrVal: this.value,\r\n      valTemp: [],\r\n      options: [], // 回显备选项\r\n      loading: true,\r\n      props: {\r\n        label: 'name',\r\n        value: 'id',\r\n        children: 'children',\r\n        checkStrictly: this.checkStrictly,\r\n        lazy: this.lazy,\r\n        lazyLoad: this.lazyLoad\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    // 通过value激发initOptions\r\n    value: {\r\n      async handler(val) {\r\n        this.changeSelection()\r\n      },\r\n      deep: true,\r\n      immediate: true\r\n    }\r\n  },\r\n  methods: {\r\n    async changeSelection() {\r\n      this.loading = true\r\n      if (this.value) {\r\n        const res = await treeAPI.getAllParentIndex(this.keyWords, this.value)\r\n        if (res.data.length > 0) {\r\n          this.valTemp = res.data.map(item => item.id).reverse()\r\n        }\r\n      } else {\r\n        this.valTemp = []\r\n      }\r\n      await this.initOptions()\r\n\r\n      if (this.lazy) {\r\n        this.isShowInfo = false\r\n        this.arrVal = [...this.valTemp]\r\n        this.$nextTick(() => {\r\n          this.isShowInfo = true\r\n        })\r\n      }\r\n      this.loading = false\r\n    },\r\n    async initOptions(searchKey) {\r\n      if (searchKey != null) {\r\n        this.searchKeys = searchKey\r\n      }\r\n      try {\r\n        if (!this.lazy) { // 不是懒加载\r\n          if (this.options.length === 0) { // 没有加载过,直接加载完\r\n            const res = await treeAPI.getAllNodes({\r\n              keyWords: this.keyWords,\r\n              virtualRootFlag: false,\r\n              searchKey: this.searchKeys,\r\n              lazy: false\r\n            })\r\n            this.options = res.data\r\n          }\r\n        } else { // 懒加载\r\n          var arrNow = _.cloneDeep(this.valTemp)\r\n          arrNow.unshift(-1)\r\n          arrNow.pop()\r\n          arrNow.reverse()\r\n          var res = []\r\n          var lastRes = []\r\n          var lastParent = 0\r\n          this.options = []\r\n          arrNow.forEach(async element => {\r\n            res = await treeAPI.getAllNodes({\r\n              keyWords: this.keyWords,\r\n              virtualRootFlag: false,\r\n              searchKey: searchKey,\r\n              lazy: true,\r\n              parentId: element\r\n            })\r\n            res = res.data\r\n            if (lastParent !== 0) {\r\n              res.forEach(el => {\r\n                if (el.id === element) {\r\n                  el.children.push(lastRes)\r\n                }\r\n              })\r\n            }\r\n            lastRes = _.cloneDeep(res)\r\n            lastParent = element\r\n          })\r\n          this.options = res\r\n        }\r\n      } catch (error) { console.log(error) }\r\n    },\r\n    // listToTree(list) {\r\n    //   const cloneData = JSON.parse(JSON.stringify(list)) // 对源数据深度克隆\r\n    //   return cloneData.filter(parent => { // 循环所有项，并添加children属性\r\n    //     const branchArr = cloneData.filter(child => parent['id'] === child['parentId']) // 返回每一项的子级数组\r\n    //     branchArr.length > 0 ? parent['children'] = branchArr : '' // 给父级添加一个children属性，并赋值\r\n    //     return parent['parentId'] === -1 // 返回第一层\r\n    //   })\r\n    // },\r\n    async getCurrentLevels(parentId) {\r\n      try {\r\n        const res = await treeAPI.getAllNodes({\r\n          keyWords: this.keyWords,\r\n          virtualRootFlag: false,\r\n          searchKey: this.searchKeys,\r\n          lazy: this.lazy,\r\n          parentId: parentId\r\n        })\r\n        const nodes = res.data.map(item => ({\r\n          id: item.id,\r\n          name: item.name,\r\n          parentId: parentId,\r\n          leaf: item.childNum === 0 // 判断是否为末尾节点\r\n        }))\r\n        return nodes\r\n      } catch (error) {\r\n        return []\r\n      }\r\n    },\r\n    // 懒加载\r\n    async lazyLoad(node, resolve) {\r\n      const { level } = node\r\n      const parentId = level ? node.value : -1\r\n      try {\r\n        const nodes = await this.getCurrentLevels(parentId)\r\n        resolve(nodes)\r\n        // this.changeSelection()\r\n      } catch (error) {\r\n        resolve([])\r\n      }\r\n    },\r\n    // 接口入参需求为最后一级 id\r\n    handleChange(val) {\r\n      const lastId = val[val.length - 1]\r\n      this.$emit('update-value', lastId, this.field)\r\n    },\r\n    handleFocus(val) {\r\n      console.log(val)\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"sourceRoot":"src/components"}]}